// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using hnh.Data;

#nullable disable

namespace hnh.Migrations
{
    [DbContext(typeof(MyDbcontext))]
    [Migration("20240512100822_DbInit")]
    partial class DbInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("hnh.Data.Category", b =>
                {
                    b.Property<int>("categoryid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("categoryid"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("categoryid");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("hnh.Data.Comment", b =>
                {
                    b.Property<int>("commentid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("commentid"));

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("propertyid")
                        .HasColumnType("int");

                    b.Property<int?>("userid")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("commentid");

                    b.HasIndex("propertyid");

                    b.HasIndex("userid");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("hnh.Data.District", b =>
                {
                    b.Property<int>("districtid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("districtid"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("districtid");

                    b.ToTable("districts", (string)null);
                });

            modelBuilder.Entity("hnh.Data.Password_Reset", b =>
                {
                    b.Property<int>("password_resetid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("password_resetid"));

                    b.Property<DateTime?>("createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userid")
                        .HasColumnType("int");

                    b.HasKey("password_resetid");

                    b.HasIndex("userid");

                    b.ToTable("password_resets", (string)null);
                });

            modelBuilder.Entity("hnh.Data.Property", b =>
                {
                    b.Property<int>("propertyid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("propertyid"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("approve")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<double>("area")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<int>("categoryid")
                        .HasColumnType("int");

                    b.Property<int>("countview")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("districtid")
                        .HasColumnType("int");

                    b.Property<string>("furniture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("no-img.jpg");

                    b.Property<string>("latLng")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<double>("price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("userid")
                        .HasColumnType("int");

                    b.HasKey("propertyid");

                    b.HasIndex("categoryid");

                    b.HasIndex("districtid");

                    b.HasIndex("userid");

                    b.ToTable("properties", (string)null);
                });

            modelBuilder.Entity("hnh.Data.Report", b =>
                {
                    b.Property<int>("reportid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("reportid"));

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("propertyid")
                        .HasColumnType("int");

                    b.Property<int>("reportstatusid")
                        .HasColumnType("int");

                    b.Property<int>("userid")
                        .HasColumnType("int");

                    b.HasKey("reportid");

                    b.HasIndex("propertyid");

                    b.HasIndex("reportstatusid");

                    b.HasIndex("userid");

                    b.ToTable("reports", (string)null);
                });

            modelBuilder.Entity("hnh.Data.Report_Status", b =>
                {
                    b.Property<int>("reportstatusid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("reportstatusid"));

                    b.Property<string>("statusname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("reportstatusid");

                    b.ToTable("report_statuses", (string)null);
                });

            modelBuilder.Entity("hnh.Data.User", b =>
                {
                    b.Property<int>("userid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userid"));

                    b.Property<string>("avatar")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("no-avatar.jpg");

                    b.Property<DateTime?>("createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("remembertoken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("1");

                    b.Property<DateTime?>("updatedat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("userid");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("hnh.Data.Comment", b =>
                {
                    b.HasOne("hnh.Data.Property", "Property")
                        .WithMany("Comments")
                        .HasForeignKey("propertyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("hnh.Data.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("hnh.Data.Password_Reset", b =>
                {
                    b.HasOne("hnh.Data.User", "User")
                        .WithMany("Password_Resets")
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("hnh.Data.Property", b =>
                {
                    b.HasOne("hnh.Data.Category", "category")
                        .WithMany("Properties")
                        .HasForeignKey("categoryid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("hnh.Data.District", "district")
                        .WithMany("Properties")
                        .HasForeignKey("districtid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("hnh.Data.User", "User")
                        .WithMany("Properties")
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("category");

                    b.Navigation("district");
                });

            modelBuilder.Entity("hnh.Data.Report", b =>
                {
                    b.HasOne("hnh.Data.Property", "Property")
                        .WithMany("Reports")
                        .HasForeignKey("propertyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("hnh.Data.Report_Status", "Report_Status")
                        .WithMany("Reports")
                        .HasForeignKey("reportstatusid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("hnh.Data.User", "User")
                        .WithMany("Reports")
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("Report_Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("hnh.Data.Category", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("hnh.Data.District", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("hnh.Data.Property", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("hnh.Data.Report_Status", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("hnh.Data.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Password_Resets");

                    b.Navigation("Properties");

                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
